syntax = "proto3";

option csharp_namespace = "MyStore.Shared.Grpc.Auth";

package auth;

// Auth Service gRPC API
service AuthService {
  // Validate JWT token and get user info
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  
  // Get user by ID (for internal service calls)
  rpc GetUserById(GetUserByIdRequest) returns (GetUserByIdResponse);
  
  // Check if user has specific role
  rpc CheckUserRole(CheckUserRoleRequest) returns (CheckUserRoleResponse);
  
  // Get user permissions for resource
  rpc GetUserPermissions(GetUserPermissionsRequest) returns (GetUserPermissionsResponse);
}

// Request/Response messages
message ValidateTokenRequest {
  string token = 1;
}

message ValidateTokenResponse {
  bool is_valid = 1;
  string user_id = 2;
  string email = 3;
  string role = 4;
  repeated string permissions = 5;
  int64 expires_at = 6;
  string error_message = 7;
}

message GetUserByIdRequest {
  string user_id = 1;
}

message GetUserByIdResponse {
  bool found = 1;
  User user = 2;
  string error_message = 3;
}

message CheckUserRoleRequest {
  string user_id = 1;
  string required_role = 2;
}

message CheckUserRoleResponse {
  bool has_role = 1;
  string current_role = 2;
}

message GetUserPermissionsRequest {
  string user_id = 1;
  string resource_type = 2;
  string resource_id = 3;
}

message GetUserPermissionsResponse {
  repeated string permissions = 1;
  bool can_read = 2;
  bool can_write = 3;
  bool can_delete = 4;
}

// User entity
message User {
  string id = 1;
  string email = 2;
  string first_name = 3;
  string last_name = 4;
  string role = 5;
  bool is_active = 6;
  bool email_confirmed = 7;
  int64 created_at = 8;
  int64 updated_at = 9;
}
